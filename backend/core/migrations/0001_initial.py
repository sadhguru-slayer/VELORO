# Generated by Django 5.1.6 on 2025-03-23 17:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('freelancer', 'Freelancer'), ('client', 'Client'), ('student', 'Student')], db_index=True, default='student', max_length=20)),
                ('membership', models.CharField(choices=[('free', 'Free'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='free', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('is_profiled', models.BooleanField(default=False)),
                ('is_talentrise', models.BooleanField(default=True)),
                ('nickname', models.CharField(blank=True, max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_type', models.CharField(choices=[('fixed', 'Fixed Price'), ('hourly', 'Hourly Rate'), ('milestone', 'Milestone-Based'), ('hybrid', 'Hybrid Model')], default='fixed', max_length=20)),
                ('version', models.PositiveIntegerField(default=1)),
                ('state', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('negotiation', 'In Negotiation'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='draft', max_length=20)),
                ('is_archived', models.BooleanField(default=False)),
                ('total_value', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('estimated_hours', models.PositiveIntegerField(blank=True, null=True)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('proposed_start', models.DateField()),
                ('proposed_end', models.DateField()),
                ('delivery_buffer_days', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_bids', to=settings.AUTH_USER_MODEL)),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invited_bids', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_bids', to=settings.AUTH_USER_MODEL)),
                ('parent_bid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revisions', to='core.bid')),
            ],
        ),
        migrations.CreateModel(
            name='BidAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='bid_attachments/')),
                ('description', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.bid')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('type', models.CharField(choices=[('Messages', 'Messages'), ('Payments', 'Payments'), ('Projects', 'Projects'), ('Events', 'Events'), ('Projects & Tasks', 'Projects & Tasks'), ('Connections', 'Connections'), ('System', 'System'), ('Collaborations', 'Collaborations')], max_length=20)),
                ('related_model_id', models.PositiveIntegerField()),
                ('notification_text', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField()),
                ('budget', models.DecimalField(decimal_places=2, max_digits=10)),
                ('deadline', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_collaborative', models.BooleanField(default=False)),
                ('isSubscribed', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('ongoing', 'Ongoing'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('payment_status', models.CharField(choices=[('not_initiated', 'Not Initiated'), ('paid', 'Paid')], default='not_initiated', max_length=15)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_talentrise_friendly', models.BooleanField(default=False, help_text='Flag to mark projects suitable for TalentRise students')),
                ('complexity_level', models.CharField(choices=[('entry', 'Entry Level'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', help_text='Project complexity level to match with appropriate freelancers', max_length=15)),
                ('payment_strategy', models.CharField(default='automatic', max_length=20)),
                ('assigned_to', models.ManyToManyField(blank=True, related_name='projects_assigned', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.category')),
            ],
        ),
        migrations.AddField(
            model_name='bid',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_bids', to='core.project'),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='core.category')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='skills_required',
            field=models.ManyToManyField(blank=True, related_name='projects', to='core.skill'),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('budget', models.DecimalField(decimal_places=2, max_digits=10)),
                ('deadline', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('payment_status', models.CharField(choices=[('not_initiated', 'Not Initiated'), ('completed', 'Completed')], default='not_initiated', max_length=15)),
                ('is_payment_updated', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ManyToManyField(blank=True, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.project')),
                ('skills_required_for_task', models.ManyToManyField(blank=True, related_name='tasks', to='core.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_for', models.CharField(max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_method', models.CharField(choices=[('GPAY', 'Google Pay'), ('PAYPAL', 'PayPal'), ('BANK_TRANSFER', 'Bank Transfer')], max_length=20)),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('initiated', 'Initiated'), ('pending', 'Pending')], default='initiated', max_length=10)),
                ('invoice_number', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('currency', models.CharField(default='INR', max_length=10)),
                ('installment_period', models.CharField(blank=True, max_length=50, null=True)),
                ('discount_promo', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_sent', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_received', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='core.project')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='core.task')),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('paid', 'Paid')], default='pending', max_length=10)),
                ('due_date', models.DateField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('milestone_type', models.CharField(choices=[('payment', 'Payment Only'), ('progress', 'Progress Only'), ('hybrid', 'Both Payment & Progress')], default='hybrid', max_length=10)),
                ('is_automated', models.BooleanField(default=True, help_text='Automatically process payment when approved')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.project')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.task')),
            ],
            options={
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='BidItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('task', 'Task'), ('milestone', 'Milestone'), ('service', 'Service'), ('material', 'Material')], max_length=20)),
                ('description', models.TextField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('delivery_days', models.PositiveIntegerField()),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.bid')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.task')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='bid',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='task_bids', to='core.task'),
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=5)),
                ('feedback_type', models.CharField(choices=[('collaboration', 'Collaboration'), ('work_quality', 'Work Quality'), ('communication', 'Communication'), ('timeliness', 'Timeliness'), ('professionalism', 'Professionalism')], max_length=50)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_feedback', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.userfeedback')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BidNegotiationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('previous_state', models.CharField(max_length=50)),
                ('new_state', models.CharField(max_length=50)),
                ('note', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='negotiation_logs', to='core.bid')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['bid', 'timestamp'], name='core_bidneg_bid_id_ccf4e8_idx')],
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['title'], name='core_projec_title_3ad890_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['description'], name='core_projec_descrip_4174cb_idx'),
        ),
        migrations.AddConstraint(
            model_name='milestone',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('project__isnull', False), ('task__isnull', True)), models.Q(('project__isnull', True), ('task__isnull', False)), _connector='OR'), name='single_parent_relation'),
        ),
        migrations.AddIndex(
            model_name='biditem',
            index=models.Index(fields=['item_type', 'bid'], name='core_bidite_item_ty_e9b54e_idx'),
        ),
        migrations.AddIndex(
            model_name='bid',
            index=models.Index(fields=['state', 'project', 'freelancer'], name='core_bid_state_068866_idx'),
        ),
        migrations.AddIndex(
            model_name='bid',
            index=models.Index(fields=['total_value', 'currency'], name='core_bid_total_v_4db148_idx'),
        ),
        migrations.AddIndex(
            model_name='bid',
            index=models.Index(fields=['proposed_start', 'proposed_end'], name='core_bid_propose_cdaa3f_idx'),
        ),
        migrations.AddConstraint(
            model_name='bid',
            constraint=models.CheckConstraint(condition=models.Q(('project__isnull', False), ('project__isnull', True), _connector='OR'), name='single_bid_target'),
        ),
        migrations.AlterUniqueTogether(
            name='bid',
            unique_together={('project', 'freelancer', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='userfeedback',
            unique_together={('from_user', 'to_user', 'feedback_type')},
        ),
    ]
