# Generated by Django 5.1.6 on 2025-03-24 21:20

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0002_alter_project_status'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommissionTier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('min_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('max_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('flat_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('freelancer_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage for freelancers', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('client_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage for clients', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Commission Tier',
                'verbose_name_plural': 'Commission Tiers',
                'ordering': ['min_amount'],
                'indexes': [models.Index(fields=['min_amount', 'max_amount'], name='financeapp__min_amo_fd75af_idx'), models.Index(fields=['is_active'], name='financeapp__is_acti_259f15_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('max_amount__gt', models.F('min_amount'))), name='max_amount_greater_than_min')],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('upi', 'UPI'), ('card', 'Credit/Debit Card'), ('wallet', 'Platform Wallet')], max_length=20)),
                ('is_default', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpecialCommissionRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('flat_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('reason', models.TextField(blank=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='special_commission_rates', to='core.category')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='special_commission_rates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Special Commission Rate',
                'verbose_name_plural': 'Special Commission Rates',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('slug', models.SlugField(help_text='URL-friendly identifier', unique=True)),
                ('description', models.TextField(blank=True)),
                ('duration', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('half_yearly', 'Half Yearly'), ('yearly', 'Yearly')], db_index=True, max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('commission_rate', models.DecimalField(decimal_places=2, help_text='Commission percentage for platform', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('features', models.JSONField(default=dict)),
                ('max_projects', models.PositiveIntegerField(default=10)),
                ('max_connections', models.PositiveIntegerField(default=50)),
                ('transaction_fee_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage on platform transaction fees', max_digits=5)),
                ('priority_support', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
                'ordering': ['price', 'duration'],
                'indexes': [models.Index(fields=['is_active', 'duration'], name='financeapp__is_acti_bd69fd_idx'), models.Index(fields=['price'], name='financeapp__price_570b69_idx')],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_type', models.CharField(choices=[('project', 'Project Payment'), ('milestone', 'Milestone Payment'), ('task', 'Task Payment'), ('withdrawal', 'Withdrawal'), ('refund', 'Refund'), ('subscription', 'Subscription Payment'), ('deposit', 'Wallet Deposit'), ('escrow', 'Escrow Payment'), ('commission', 'Commission')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='pending', max_length=20)),
                ('currency', models.CharField(choices=[('INR', 'Indian Rupee'), ('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound')], default='INR', max_length=3)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('platform_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('net_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('payment_processor', models.CharField(blank=True, max_length=50)),
                ('payment_processor_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('notes', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_transactions', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.milestone')),
                ('parent_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_transactions', to='financeapp.transaction')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.project')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.task')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentGatewayLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gateway_name', models.CharField(max_length=50)),
                ('gateway_transaction_id', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(max_length=20)),
                ('response_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='financeapp.transaction')),
            ],
        ),
        migrations.CreateModel(
            name='Commission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('is_discounted', models.BooleanField(default=False)),
                ('original_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('discount_reason', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='financeapp.commissiontier')),
                ('special_rate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='financeapp.specialcommissionrate')),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='commission', to='financeapp.transaction')),
            ],
            options={
                'verbose_name': 'Commission',
                'verbose_name_plural': 'Commissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('auto_renew', models.BooleanField(default=False)),
                ('is_trial', models.BooleanField(default=False)),
                ('trial_end_date', models.DateTimeField(blank=True, null=True)),
                ('last_renewed_at', models.DateTimeField(blank=True, null=True)),
                ('cancel_requested', models.BooleanField(default=False)),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='financeapp.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Subscription',
                'verbose_name_plural': 'User Subscriptions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('hold_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount temporarily held for pending transactions', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet',
                'verbose_name_plural': 'Wallets',
            },
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('transfer', 'Transfer'), ('payment', 'Payment'), ('refund', 'Refund'), ('hold', 'Hold'), ('release', 'Release'), ('commission', 'Commission'), ('subscription', 'Subscription Fee')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('reference_id', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict)),
                ('related_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_transactions', to='financeapp.wallettransaction')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='financeapp.wallet')),
            ],
            options={
                'verbose_name': 'Wallet Transaction',
                'verbose_name_plural': 'Wallet Transactions',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddConstraint(
            model_name='specialcommissionrate',
            constraint=models.CheckConstraint(condition=models.Q(('user__isnull', False), ('category__isnull', False), _connector='OR'), name='user_or_category_required'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['from_user', 'to_user'], name='financeapp__from_us_b13207_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['status', 'payment_type'], name='financeapp__status_4a297e_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['created_at'], name='financeapp__created_8dbb5f_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_id'], name='financeapp__transac_2e63b1_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['project'], name='financeapp__project_d802ef_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['task'], name='financeapp__task_id_452929_idx'),
        ),
        migrations.AddIndex(
            model_name='commission',
            index=models.Index(fields=['transaction'], name='financeapp__transac_71a225_idx'),
        ),
        migrations.AddIndex(
            model_name='commission',
            index=models.Index(fields=['created_at'], name='financeapp__created_c5669a_idx'),
        ),
        migrations.AddIndex(
            model_name='commission',
            index=models.Index(fields=['tier'], name='financeapp__tier_id_d5b596_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user', 'is_active'], name='financeapp__user_id_1cfaa6_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['end_date', 'auto_renew'], name='financeapp__end_dat_6b5f86_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['user', 'is_active'], name='financeapp__user_id_8f31c7_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['balance'], name='financeapp__balance_c265ff_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['wallet', 'transaction_type'], name='financeapp__wallet__4fefdb_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['status', 'timestamp'], name='financeapp__status_fdc337_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['reference_id'], name='financeapp__referen_0a3365_idx'),
        ),
    ]
