import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import FormWizard from 'react-form-wizard-component';
import 'react-form-wizard-component/dist/style.css';
import { verifyToken, refreshToken } from '../utils/auth'; // Import utility functions

const ProfilingPage = () => {
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [skills, setSkills] = useState([]);
  const [selectedSkills, setSelectedSkills] = useState([]);
  const [firstname, setFirstname] = useState('');
  const [lastname, setLastname] = useState('');
  const [bio, setBio] = useState('');
  const [location, setLocation] = useState('');
  const [dob, setDob] = useState('');
  const [profilePic, setProfilePic] = useState(null); // State for profile picture
  const [paymentInfo, setPaymentInfo] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: ''
  });
  const [currentStep, setCurrentStep] = useState(1); // Track current step

  const navigate = useNavigate();

  const formWizardRef = useRef(null); // Create a reference to FormWizard

  useEffect(() => {
    const fetchCategories = async () => {
      const token = localStorage.getItem('accessToken');
      const isTokenValid = await verifyToken(token);

      if (!isTokenValid) {
        // If token is invalid or expired, try refreshing the token
        const newToken = await refreshToken();
        if (newToken) {
          localStorage.setItem('accessToken', newToken);
        } else {
          navigate('/login'); // Redirect to login if refresh fails
          return;
        }
      }

      // Fetch categories if the token is valid
      try {
        const response = await axios.get('http://127.0.0.1:8000/api/categories/', {
          headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
        });
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }

      // Check if user profile is complete
      const profileResponse = await axios.get('http://127.0.0.1:8000/api/profile/', {
        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
      });

      if (profileResponse.data.is_profile === false) {
        navigate('/profiling'); // Redirect to /profiling if profile is incomplete
      }
    };

    fetchCategories();
  }, [navigate]);

  const handleCategoryChange = (categoryName) => {
    setSelectedCategory(categoryName);
    setSelectedSkills([]);
    if (categoryName) {
      axios.get(`http://127.0.0.1:8000/api/categories/${categoryName}/skills/`, {
        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
      }).then((response) => {
        setSkills(response.data);
      }).catch(console.error);
    } else {
      setSkills([]);
    }
  };

  const handleSkillChange = (skillId, checked) => {
    setSelectedSkills((prevSelected) => checked
      ? [...prevSelected, skillId]
      : prevSelected.filter(id => id !== skillId));
  };

  const handleProfilePicChange = (e) => {
    setProfilePic(e.target.files[0]);
  };

  const handlePaymentInfoChange = (e) => {
    const { name, value } = e.target;
    setPaymentInfo((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleNext = (currentStep) => {
    if (currentStep === 1) {
      // Step 1: Save Skills to API
      const payload = {
        category: selectedCategory,
        skills: selectedSkills,
      };
      console.log(payload);
      axios.post('http://127.0.0.1:8000/api/save_skills/', payload, {
        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
      })
        .then(() => {
          console.log('Skills saved!');
          setCurrentStep(2); // Move to next step
          formWizardRef.current.goToStep(2); // Move to the second step programmatically
        })
        .catch((error) => console.error('Error saving skills:', error));
    } else if (currentStep === 2) {
      // Step 2: Save Additional Details to API
      const formData = new FormData();
      formData.append('firstname', firstname);
      formData.append('lastname', lastname);
      formData.append('bio', bio);
      formData.append('location', location);
      formData.append('dob', dob);
      formData.append('profile_picture', profilePic);

      axios.post('http://127.0.0.1:8000/api/save_additional_details/', formData, {
        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
      })
        .then(() => {
          console.log('Additional details saved!');
          setCurrentStep(3); // Move to next step
          formWizardRef.current.goToStep(3); // Move to the third step programmatically
        })
        .catch((error) => console.error('Error saving additional details:', error));
    } else if (currentStep === 3) {
      // Step 3: Save Payment Information
      const paymentData = {
        cardNumber: paymentInfo.cardNumber,
        expiryDate: paymentInfo.expiryDate,
        cvv: paymentInfo.cvv,
      };
      axios.post('http://127.0.0.1:8000/api/save_payment_info/', paymentData, {
        headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
      })
        .then(() => {
          console.log('Payment info saved!');
          // Optionally, navigate to the next page or finish the profiling process
          navigate('/dashboard'); // Example: Redirect to dashboard
        })
        .catch((error) => console.error('Error saving payment info:', error));
    }
  };



  const skipPaymentTemplate = () => {
    return (
      <button className="base-button" onClick={handleSkip}>
        Skip Payment
      </button>
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <FormWizard
        shape="circle"
        color="#1E3A8A"
        ref={formWizardRef} // Attach ref to FormWizard component
        backButtonTemplate={backTemplate}
        nextButtonTemplate={nextTemplate}
        finishButtonTemplate={(handleFinish) => (
          <button className="finish-button" onClick={handleFinish}>
            Finish
          </button>
        )}
        onComplete={() => console.log("Form completed!")}
      >
        {/* Step 1: Select Category and Skills */}
        <FormWizard.TabContent title="Category & Skills" icon="fas fa-cogs">
          <select
            value={selectedCategory}
            onChange={(e) => handleCategoryChange(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          >
            <option value="">Select Category</option>
            {categories.map((category) => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
          {skills.length > 0 && (
            <div className="mb-4">
              {skills.map((skill) => (
                <label key={skill.id} className="block">
                  <input
                    type="checkbox"
                    value={skill.id}
                    onChange={(e) => handleSkillChange(skill.id, e.target.checked)}
                  />
                  {skill.name}
                </label>
              ))}
            </div>
          )}
        </FormWizard.TabContent>

        {/* Step 2: Additional Details */}
        <FormWizard.TabContent title="Additional Information" icon="fa-solid fa-info">
          <input
            placeholder="First Name"
            value={firstname}
            type="text"
            onChange={(e) => setFirstname(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            placeholder="Last Name"
            value={lastname}
            type="text"
            onChange={(e) => setLastname(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            placeholder="Bio"
            value={bio}
            type="text"
            onChange={(e) => setBio(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="text"
            placeholder="Location"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="date"
            value={dob}
            onChange={(e) => setDob(e.target.value)}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="file"
            onChange={handleProfilePicChange}
            className="w-full p-2 border rounded mb-2"
          />
        </FormWizard.TabContent>

        {/* Step 3: Payment Info */}
        <FormWizard.TabContent title="Payment Info" icon="fa-solid fa-credit-card">
          <input
            type="text"
            name="cardNumber"
            placeholder="Card Number"
            value={paymentInfo.cardNumber}
            onChange={handlePaymentInfoChange}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="text"
            name="expiryDate"
            placeholder="Expiry Date"
            value={paymentInfo.expiryDate}
            onChange={handlePaymentInfoChange}
            className="w-full p-2 border rounded mb-2"
          />
          <input
            type="text"
            name="cvv"
            placeholder="CVV"
            value={paymentInfo.cvv}
            onChange={handlePaymentInfoChange}
            className="w-full p-2 border rounded mb-2"
          />
        </FormWizard.TabContent>
      </FormWizard>
    </div>
  );
};

export default ProfilingPage;
